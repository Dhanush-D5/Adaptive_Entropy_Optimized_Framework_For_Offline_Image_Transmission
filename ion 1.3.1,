[33mcommit f2ef173bfddd27662aaa9162b85a1dfdd2d7a446[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32moffline-image-sms[m[33m, [m[1;31morigin/main[m[33m, [m[1;31morigin/HEAD[m[33m, [m[1;32mmain[m[33m)[m
Author: Dhanush-D05 <dd7337002@gmail.com>
Date:   Sun Aug 31 18:39:37 2025 +0530

    Compressed and converted to chunks

[1mdiff --git a/app/FetchContacts.tsx b/app/FetchContacts.tsx[m
[1mindex a3b9804..417a18c 100644[m
[1m--- a/app/FetchContacts.tsx[m
[1m+++ b/app/FetchContacts.tsx[m
[36m@@ -100,7 +100,7 @@[m [mexport default function FetchContacts() {[m
               <TouchableOpacity[m
                 onPress={() =>[m
                   router.push({[m
[31m-                    pathname: "/Base64Conversion",[m
[32m+[m[32m                    pathname: "/ImageTransmissionScreen",[m
                     params: {[m
                       contactId: item.id ?? "",[m
                       name: item.name ?? "Unnamed",[m
[1mdiff --git a/app/ImageHandler.tsx b/app/ImageHandler.tsx[m
[1mnew file mode 100644[m
[1mindex 0000000..2f52e2d[m
[1m--- /dev/null[m
[1m+++ b/app/ImageHandler.tsx[m
[36m@@ -0,0 +1,85 @@[m
[32m+[m[32mimport * as FileSystem from "expo-file-system";[m
[32m+[m[32mimport * as ImageManipulator from "expo-image-manipulator";[m
[32m+[m
[32m+[m[32mexport async function compressToTargetSize([m
[32m+[m[32m  uri: string,[m
[32m+[m[32m  targetBytes = 5500, // max clarity within ~50 SMS[m
[32m+[m[32m  initialWidth = 128,[m
[32m+[m[32m  minWidth = 64,[m
[32m+[m[32m  initialQuality = 0.8,[m
[32m+[m[32m  minQuality = 0.35[m
[32m+[m[32m): Promise<{ base64: string } | null> {[m
[32m+[m[32m  try {[m
[32m+[m[32m    let quality = initialQuality;[m
[32m+[m[32m    let width = initialWidth;[m
[32m+[m
[32m+[m[32m    while (width >= minWidth && quality >= minQuality) {[m
[32m+[m[32m      const manipResult = await ImageManipulator.manipulateAsync([m
[32m+[m[32m        uri,[m
[32m+[m[32m        [{ resize: { width } }],[m
[32m+[m[32m        { compress: quality, format: ImageManipulator.SaveFormat.JPEG, base64: true }[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      if (manipResult.base64) {[m
[32m+[m[32m        const sizeInBytes = (manipResult.base64.length * 3) / 4;[m
[32m+[m[32m        console.log(`üîç Trying width=${width}, quality=${quality}, size=${sizeInBytes}`);[m
[32m+[m
[32m+[m[32m        if (sizeInBytes <= targetBytes) {[m
[32m+[m[32m          console.log(`‚úÖ Compression success: ${sizeInBytes} bytes`);[m
[32m+[m[32m          return { base64: manipResult.base64 };[m
[32m+[m[32m        }[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      // Adjust gradually[m
[32m+[m[32m      quality -= 0.1;[m
[32m+[m[32m      width = Math.floor(width * 0.85);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    console.warn("‚ö†Ô∏è Could not reach target size, returning smallest version");[m
[32m+[m[32m    const fallback = await ImageManipulator.manipulateAsync([m
[32m+[m[32m      uri,[m
[32m+[m[32m      [{ resize: { width: minWidth } }],[m
[32m+[m[32m      { compress: minQuality, format: ImageManipulator.SaveFormat.JPEG, base64: true }[m
[32m+[m[32m    );[m
[32m+[m
[32m+[m[32m    return { base64: fallback.base64 || "" };[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    console.error("‚ùå Compression failed:", err);[m
[32m+[m[32m    return null;[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport function createSmsChunks([m
[32m+[m[32m  base64: string,[m
[32m+[m[32m  maxSms = 50,[m
[32m+[m[32m  chunkSize = 110 // tuned for 50 SMS max[m
[32m+[m[32m): { chunks: string[] } {[m
[32m+[m[32m  const chunks: string[] = [];[m
[32m+[m[32m  for (let i = 0; i < base64.length; i += chunkSize) {[m
[32m+[m[32m    chunks.push(base64.substring(i, i + chunkSize));[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  if (chunks.length > maxSms) {[m
[32m+[m[32m    console.warn(`‚ö†Ô∏è Too many chunks: ${chunks.length}, exceeds SMS limit (${maxSms})`);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  return { chunks };[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport async function reconstructFromSmsMessages(chunks: string[]): Promise<string | null> {[m
[32m+[m[32m  try {[m
[32m+[m[32m    if (!chunks || chunks.length === 0) return null;[m
[32m+[m
[32m+[m[32m    const allData = chunks.join("");[m
[32m+[m[32m    const filePath = FileSystem.documentDirectory + `reconstructed_${Date.now()}.jpg`;[m
[32m+[m
[32m+[m[32m    await FileSystem.writeAsStringAsync(filePath, allData, {[m
[32m+[m[32m      encoding: FileSystem.EncodingType.Base64,[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    return filePath;[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    console.error("‚ùå Reconstruction failed:", err);[m
[32m+[m[32m    return null;[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/app/ImageTransmissionScreen.tsx b/app/ImageTransmissionScreen.tsx[m
[1mnew file mode 100644[m
[1mindex 0000000..02d9946[m
[1m--- /dev/null[m
[1m+++ b/app/ImageTransmissionScreen.tsx[m
[36m@@ -0,0 +1,106 @@[m
[32m+[m[32mimport React, { useState } from "react";[m
[32m+[m[32mimport { View, Text, FlatList, Image, StyleSheet, TouchableOpacity } from "react-native";[m
[32m+[m[32mimport * as ImagePicker from "expo-image-picker";[m
[32m+[m[32mimport { compressToTargetSize, createSmsChunks, reconstructFromSmsMessages } from "./ImageHandler";[m
[32m+[m
[32m+[m[32minterface ChatMessage {[m
[32m+[m[32m  id: string;[m
[32m+[m[32m  type: "sent" | "received";[m
[32m+[m[32m  text?: string;[m
[32m+[m[32m  image?: string;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst TARGET_BYTES = 5500; // ~5.5KB per compressed image target[m
[32m+[m
[32m+[m[32mexport default function ImageChatScreen() {[m
[32m+[m[32m  const [messages, setMessages] = useState<ChatMessage[]>([]);[m
[32m+[m
[32m+[m[32m  const pickImage = async () => {[m
[32m+[m[32m    const result = await ImagePicker.launchImageLibraryAsync({ base64: false, quality: 1 });[m
[32m+[m[32m    if (!result.canceled && result.assets.length > 0) {[m
[32m+[m[32m      const uri = result.assets[0].uri;[m
[32m+[m[32m      await processImage(uri);[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const processImage = async (uri: string) => {[m
[32m+[m[32m    const compressed = await compressToTargetSize(uri, TARGET_BYTES, 128, 32, 0.7, 0.2);[m
[32m+[m[32m    if (!compressed) return;[m
[32m+[m
[32m+[m[32m    const { chunks } = createSmsChunks(compressed.base64, 50, 153);[m
[32m+[m
[32m+[m[32m    let tempChunks: string[] = [];[m
[32m+[m
[32m+[m[32m    for (let i = 0; i < chunks.length; i++) {[m
[32m+[m[32m      const chunkText = `Chunk ${i + 1}/${chunks.length}`;[m
[32m+[m[32m      addMessage({ type: "sent", text: chunkText });[m
[32m+[m[32m      addMessage({ type: "received", text: chunkText });[m
[32m+[m
[32m+[m[32m      tempChunks.push(chunks[i]);[m
[32m+[m
[32m+[m[32m      // Only reconstruct after last chunk[m
[32m+[m[32m      if (i === chunks.length - 1) {[m
[32m+[m[32m        setTimeout(() => reconstruct(tempChunks), 500);[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const reconstruct = async (chunks: string[]) => {[m
[32m+[m[32m    const path = await reconstructFromSmsMessages(chunks);[m
[32m+[m[32m    if (path) {[m
[32m+[m[32m      addMessage({ type: "received", image: path });[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const addMessage = (msg: Partial<ChatMessage>) => {[m
[32m+[m[32m    setMessages((prev) => [[m
[32m+[m[32m      ...prev,[m
[32m+[m[32m      { id: Date.now().toString() + Math.random(), type: msg.type!, text: msg.text, image: msg.image },[m
[32m+[m[32m    ]);[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <View style={styles.container}>[m
[32m+[m[32m      <FlatList[m
[32m+[m[32m        data={messages}[m
[32m+[m[32m        keyExtractor={(item) => item.id}[m
[32m+[m[32m        renderItem={({ item }) => ([m
[32m+[m[32m          <View[m
[32m+[m[32m            style={[[m
[32m+[m[32m              styles.message,[m
[32m+[m[32m              item.type === "sent" ? styles.sent : styles.received,[m
[32m+[m[32m            ]}[m
[32m+[m[32m          >[m
[32m+[m[32m            {item.text && <Text style={styles.text}>{item.text}</Text>}[m
[32m+[m[32m            {item.image && ([m
[32m+[m[32m              <Image source={{ uri: item.image }} style={styles.image} />[m
[32m+[m[32m            )}[m
[32m+[m[32m          </View>[m
[32m+[m[32m        )}[m
[32m+[m[32m      />[m
[32m+[m[32m      <TouchableOpacity style={styles.button} onPress={pickImage}>[m
[32m+[m[32m        <Text style={styles.buttonText}>üì∑ Send Image</Text>[m
[32m+[m[32m      </TouchableOpacity>[m
[32m+[m[32m    </View>[m
[32m+[m[32m  );[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst styles = StyleSheet.create({[m
[32m+[m[32m  container: { flex: 1, backgroundColor: "#f5f5f5" },[m
[32m+[m[32m  message: {[m
[32m+[m[32m    margin: 8,[m
[32m+[m[32m    padding: 10,[m
[32m+[m[32m    borderRadius: 10,[m
[32m+[m[32m    maxWidth: "70%",[m
[32m+[m[32m  },[m
[32m+[m[32m  sent: { backgroundColor: "#dcf8c6", alignSelf: "flex-end" },[m
[32m+[m[32m  received: { backgroundColor: "#fff", alignSelf: "flex-start" },[m
[32m+[m[32m  text: { fontSize: 14 },[m
[32m+[m[32m  image: { width: 150, height: 150, borderRadius: 10, marginTop: 5 },[m
[32m+[m[32m  button: {[m
[32m+[m[32m    backgroundColor: "#25D366",[m
[32m+[m[32m    padding: 15,[m
[32m+[m[32m    alignItems: "center",[m
[32m+[m[32m  },[m
[32m+[m[32m  buttonText: { color: "#fff", fontWeight: "bold" },[m
[32m+[m[32m});[m
[1mdiff --git a/app/Screen.tsx b/app/Screen.tsx[m
[1mnew file mode 100644[m
[1mindex 0000000..dee4d02[m
[1m--- /dev/null[m
[1m+++ b/app/Screen.tsx[m
[36m@@ -0,0 +1,74 @@[m
[32m+[m[32mimport React, { useState } from "react";[m
[32m+[m[32mimport { View, Text, TextInput, TouchableOpacity, StyleSheet, FlatList } from "react-native";[m
[32m+[m[32mimport { useLocalSearchParams } from "expo-router";[m
[32m+[m[32mimport * as SMS from "expo-sms";[m
[32m+[m
[32m+[m[32mexport default function ChatScreen() {[m
[32m+[m[32m  const { name, number } = useLocalSearchParams<{ name: string; number: string }>();[m
[32m+[m[32m  const [messages, setMessages] = useState<{ text: string; sender: string }[]>([]);[m
[32m+[m[32m  const [input, setInput] = useState("");[m
[32m+[m
[32m+[m[32m  const sendMessage = async () => {[m
[32m+[m[32m    if (!input.trim()) return;[m
[32m+[m
[32m+[m[32m    // Add to chat UI[m
[32m+[m[32m    setMessages((prev) => [...prev, { text: input, sender: "me" }]);[m
[32m+[m
[32m+[m[32m    // Try sending SMS[m
[32m+[m[32m    const isAvailable = await SMS.isAvailableAsync();[m
[32m+[m[32m    if (isAvailable) {[m
[32m+[m[32m      await SMS.sendSMSAsync([number], input);[m
[32m+[m[32m    } else {[m
[32m+[m[32m      alert("SMS not available on this device");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    setInput("");[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <View style={styles.container}>[m
[32m+[m[32m      <Text style={styles.header}>Chat with {name}</Text>[m
[32m+[m
[32m+[m[32m      <FlatList[m
[32m+[m[32m        data={messages}[m
[32m+[m[32m        keyExtractor={(_, i) => i.toString()}[m
[32m+[m[32m        renderItem={({ item }) => ([m
[32m+[m[32m          <View[m
[32m+[m[32m            style={[[m
[32m+[m[32m              styles.messageBubble,[m
[32m+[m[32m              item.sender === "me" ? styles.myMessage : styles.theirMessage,[m
[32m+[m[32m            ]}[m
[32m+[m[32m          >[m
[32m+[m[32m            <Text style={styles.messageText}>{item.text}</Text>[m
[32m+[m[32m          </View>[m
[32m+[m[32m        )}[m
[32m+[m[32m      />[m
[32m+[m
[32m+[m[32m      <View style={styles.inputContainer}>[m
[32m+[m[32m        <TextInput[m
[32m+[m[32m          style={styles.input}[m
[32m+[m[32m          value={input}[m
[32m+[m[32m          onChangeText={setInput}[m
[32m+[m[32m          placeholder="Type a message..."[m
[32m+[m[32m          placeholderTextColor="#aaa"[m
[32m+[m[32m        />[m
[32m+[m[32m        <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>[m
[32m+[m[32m          <Text style={styles.sendText}>Send</Text>[m
[32m+[m[32m        </TouchableOpacity>[m
[32m+[m[32m      </View>[m
[32m+[m[32m    </View>[m
[32m+[m[32m  );[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst styles = StyleSheet.create({[m
[32m+[m[32m  container: { flex: 1, backgroundColor: "#140028", padding: 10 },[m
[32m+[m[32m  header: { fontSize: 18, fontWeight: "bold", color: "#fff", marginBottom: 10, textAlign: "center" },[m
[32m+[m[32m  messageBubble: { padding: 10, borderRadius: 10, marginVertical: 5, maxWidth: "75%" },[m
[32m+[m[32m  myMessage: { alignSelf: "flex-end", backgroundColor: "#6a0dad" },[m
[32m+[m[32m  theirMessage: { alignSelf: "flex-start", backgroundColor: "#2a2a3d" },[m
[32m+[m[32m  messageText: { color: "#fff" },[m
[32m+[m[32m  inputContainer: { flexDirection: "row", alignItems: "center", marginTop: "auto" },[m
[32m+[m[32m  input: { flex: 1, borderWidth: 1, borderColor: "#6a0dad", borderRadius: 20, paddingHorizontal: 15, color: "#fff" },[m
[32m+[m[32m  sendButton: { marginLeft: 10, backgroundColor: "#6a0dad", paddingHorizontal: 15, paddingVertical: 10, borderRadius: 20 },[m
[32m+[m[32m  sendText: { color: "#fff", fontWeight: "bold" },[m
[32m+[m[32m});[m
[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex 4661dbe..6c1e9fe 100644[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -27,6 +27,8 @@[m
         "expo-linking": "~7.1.7",[m
         "expo-module-scripts": "^4.1.10",[m
         "expo-router": "~5.1.5",[m
[32m+[m[32m        "expo-sharing": "^13.1.5",[m
[32m+[m[32m        "expo-sms": "^13.1.4",[m
         "expo-splash-screen": "~0.30.10",[m
         "expo-status-bar": "~2.2.3",[m
         "expo-symbols": "~0.4.5",[m
[36m@@ -36,7 +38,10 @@[m
         "react": "19.0.0",[m
         "react-dom": "19.0.0",[m
         "react-native": "0.79.5",[m
[32m+[m[32m        "react-native-fs": "^2.20.0",[m
         "react-native-gesture-handler": "~2.24.0",[m
[32m+[m[32m        "react-native-image-picker": "^8.2.1",[m
[32m+[m[32m        "react-native-image-resizer": "^1.4.5",[m
         "react-native-keyboard-aware-scroll-view": "^0.9.5",[m
         "react-native-reanimated": "~3.17.4",[m
         "react-native-safe-area-context": "5.4.0",[m
[36m@@ -5808,6 +5813,11 @@[m
       "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",[m
       "license": "MIT"[m
     },[m
[32m+[m[32m    "node_modules/base-64": {[m
[32m+[m[32m      "version": "0.1.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/base-64/-/base-64-0.1.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-Y5gU45svrR5tI2Vt/X9GPd3L0HNIKzGu202EjxrXMpuc2V2CiKgemAbUUsqYmZJvPtCXoUKjNZwBJzsNScUbXA=="[m
[32m+[m[32m    },[m
     "node_modules/base64-js": {[m
       "version": "1.5.1",[m
       "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",[m
[36m@@ -8630,6 +8640,24 @@[m
         "node": ">=10"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/expo-sharing": {[m
[32m+[m[32m      "version": "13.1.5",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/expo-sharing/-/expo-sharing-13.1.5.tgz",[m
[32m+[m[32m      "integrity": "sha512-X/5sAEiWXL2kdoGE3NO5KmbfcmaCWuWVZXHu8OQef7Yig4ZgHFkGD11HKJ5KqDrDg+SRZe4ISd6MxE7vGUgm4w==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "expo": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/expo-sms": {[m
[32m+[m[32m      "version": "13.1.4",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/expo-sms/-/expo-sms-13.1.4.tgz",[m
[32m+[m[32m      "integrity": "sha512-yt8htaS/aOWAXn2YpLfoeSIxpLFqnt9E3lx6IGKll9/5wAh8BdQvKzzzFamJIvlyCaC24orqcXfhQxpboBd3DA==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "expo": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/expo-splash-screen": {[m
       "version": "0.30.10",[m
       "resolved": "https://registry.npmjs.org/expo-splash-screen/-/expo-splash-screen-0.30.10.tgz",[m
[36m@@ -13700,6 +13728,25 @@[m
         "react-native": "*"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/react-native-fs": {[m
[32m+[m[32m      "version": "2.20.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/react-native-fs/-/react-native-fs-2.20.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-VkTBzs7fIDUiy/XajOSNk0XazFE9l+QlMAce7lGuebZcag5CnjszB+u4BdqzwaQOdcYb5wsJIsqq4kxInIRpJQ==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "base-64": "^0.1.0",[m
[32m+[m[32m        "utf8": "^3.0.0"[m
[32m+[m[32m      },[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "react-native": "*",[m
[32m+[m[32m        "react-native-windows": "*"[m
[32m+[m[32m      },[m
[32m+[m[32m      "peerDependenciesMeta": {[m
[32m+[m[32m        "react-native-windows": {[m
[32m+[m[32m          "optional": true[m
[32m+[m[32m        }[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/react-native-gesture-handler": {[m
       "version": "2.24.0",[m
       "resolved": "https://registry.npmjs.org/react-native-gesture-handler/-/react-native-gesture-handler-2.24.0.tgz",[m
[36m@@ -13715,6 +13762,26 @@[m
         "react-native": "*"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/react-native-image-picker": {[m
[32m+[m[32m      "version": "8.2.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/react-native-image-picker/-/react-native-image-picker-8.2.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-FBeGYJGFDjMdGCcyubDJgBAPCQ4L1D3hwLXyUU91jY9ahOZMTbluceVvRmrEKqnDPFJ0gF1NVhJ0nr1nROFLdg==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "react": "*",[m
[32m+[m[32m        "react-native": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/react-native-image-resizer": {[m
[32m+[m[32m      "version": "1.4.5",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/react-native-image-resizer/-/react-native-image-resizer-1.4.5.tgz",[m
[32m+[m[32m      "integrity": "sha512-33EgL3C9pyvjKpullAB6fWyD5QhoYEpNNB9rxNvUsrpAnL2mHBW7PTrUCCZudJeB6Weg7nbweKrSw1nnto5aqg==",[m
[32m+[m[32m      "deprecated": "üö® react-native-image-resizer has moved to @bam.tech/react-native-image-resizer",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "react-native": ">=v0.40.0"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/react-native-iphone-x-helper": {[m
       "version": "1.3.1",[m
       "resolved": "https://registry.npmjs.org/react-native-iphone-x-helper/-/react-native-iphone-x-helper-1.3.1.tgz",[m
[36m@@ -16265,6 +16332,12 @@[m
         "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/utf8": {[m
[32m+[m[32m      "version": "3.0.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/utf8/-/utf8-3.0.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-E8VjFIQ/TyQgp+TZfS6l8yp/xWppSAHzidGiRrqe4bK4XP9pTRyKFgGJpO3SN7zdX4DeomTrwaseCHovfpFcqQ==",[m
[32m+[m[32m      "license": "MIT"[m
[32m+[m[32m